"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function apple() {
  const data = _interopRequireWildcard(require("../../../../appleApi"));

  apple = function () {
    return data;
  };

  return data;
}

function _prompt() {
  const data = _interopRequireDefault(require("../../../../prompt"));

  _prompt = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

async function revoke(appleCtx, typesToRevoke, projectMetadata = {}) {
  const managers = apple().createManagers(appleCtx);

  for (const type of typesToRevoke) {
    const manager = managers[type];

    if (manager) {
      await _revokeByType(manager, projectMetadata);
    }
  }
}

async function _revokeByType(manager, projectMetadata) {
  if (manager instanceof apple().ProvisioningProfileManager) {
    const {
      bundleIdentifier
    } = projectMetadata;
    await manager.revoke(bundleIdentifier);
    return;
  }

  if (manager.list) {
    const list = await manager.list();

    if (!list || list.length === 0) {
      return;
    }

    const choices = list.map(cert => ({
      name: manager.format(cert),
      value: cert.id
    }));
    const ids = await _askWhatToRevoke(choices);
    await manager.revoke(ids);
  } else {
    await manager.revoke();
  }
}

async function _askWhatToRevoke(choices) {
  const {
    ids
  } = await (0, _prompt().default)({
    type: 'checkbox',
    name: 'ids',
    message: `What would you like to revoke?`,
    pageSize: Infinity,
    choices
  });
  return ids;
}

var _default = revoke;
exports.default = _default;
//# sourceMappingURL=../../../../__sourcemaps__/commands/build/ios/credentials/revoke.js.map
