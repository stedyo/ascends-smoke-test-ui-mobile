"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runCredentialsManagerStandalone = runCredentialsManagerStandalone;
exports.runCredentialsManager = runCredentialsManager;
exports.CredentialsManager = exports.GoBackError = void 0;

function _log() {
  const data = _interopRequireDefault(require("../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _Select() {
  const data = require("./views/Select");

  _Select = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

async function runCredentialsManagerStandalone(ctx, startView) {
  const manager = new CredentialsManager(ctx, startView, _Select().askQuit);
  await manager.run();
}

async function runCredentialsManager(ctx, startView) {
  const manager = new CredentialsManager(ctx, startView, _Select().doQuit);
  return await manager.run();
}

class GoBackError extends Error {
  constructor() {
    super(); // Set the prototype explicitly.
    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work

    Object.setPrototypeOf(this, GoBackError.prototype);
  }

}

exports.GoBackError = GoBackError;

class CredentialsManager {
  constructor(ctx, startView, quit) {
    _defineProperty(this, "_viewHistory", []);

    CredentialsManager._manager = this;
    this._ctx = ctx;
    this._mainView = startView;
    this._currentView = startView;
    this._quit = quit;
  }

  static get() {
    if (!CredentialsManager._manager) {
      throw new Error('Credential Manager has not been initialized yet');
    }

    return CredentialsManager._manager;
  }

  async run() {
    while (true) {
      try {
        const previousView = this._currentView;
        this._currentView = (await this._currentView.open(this._ctx)) || (await this._quit(this._mainView));
        this.addToHistory(previousView);
      } catch (error) {
        if (error instanceof _Select().QuitError) {
          return null;
        } else if (error instanceof GoBackError) {
          this._currentView = this.popFromHistory() || (await this._quit(this._mainView));
        } else {
          (0, _log().default)(error);
          await new Promise(res => setTimeout(res, 1000));
          this._currentView = await this._quit(this._mainView);
        }
      }
    }
  }

  addToHistory(view) {
    this._viewHistory.push(view);
  }

  popFromHistory() {
    return this._viewHistory.pop() || null;
  }

  async doInteractiveOperation(operation, currentView) {
    this.addToHistory(currentView);
    const result = await operation();
    this.popFromHistory();
    return result;
  }

  changeMainView(view) {
    this._mainView = view;
  }

}

exports.CredentialsManager = CredentialsManager;
//# sourceMappingURL=../__sourcemaps__/credentials/route.js.map
